<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>寒山实验室</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://hanxiansen.github.io/"/>
  <updated>2016-09-13T08:29:52.244Z</updated>
  <id>https://hanxiansen.github.io/</id>
  
  <author>
    <name>金明决</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用redis、memchache实现PHP中的sessions共享</title>
    <link href="https://hanxiansen.github.io/2016/09/13/%E4%BD%BF%E7%94%A8redis%E3%80%81memchache%E5%AE%9E%E7%8E%B0PHP%E4%B8%AD%E7%9A%84sessions%E5%85%B1%E4%BA%AB/"/>
    <id>https://hanxiansen.github.io/2016/09/13/使用redis、memchache实现PHP中的sessions共享/</id>
    <published>2016-09-13T08:21:04.000Z</published>
    <updated>2016-09-13T08:29:52.244Z</updated>
    
    <content type="html"><![CDATA[<p>默认情况下，PHP将session存放到当前服务器/tmp目录下，一个session一个文件，全部以sess_前缀开始。随着session文件的增加出现性能问题，并且不利于项目的扩展：session不共享，导致session丢失。</p>
<p>为了解决这个问题，我们可以将session统一存放到redis、memchache这些nosql中。</p>
<p>安装redis、memchache</p>
<p>TTLSA已经有相关文章，请前往《 redis安装配置 – ttlsa教程系列之redis 》、《memcached使用详解》</p>
<p>安装php扩展</p>
<p>最简单的方法，使用pecl，或者自行下载源码安装。</p>
<p>安装redis扩展<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># pecl install redis</div><div class="line"># pecl install redis</div></pre></td></tr></table></figure></p>
<p>安装memchache扩展<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># pecl install memchache</span></div><div class="line"><span class="meta"># pecl install memchache</span></div></pre></td></tr></table></figure></p>
<p>配置PHP session<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">session<span class="selector-class">.save_handler</span> = redis</div><div class="line">session<span class="selector-class">.save_path</span> = <span class="string">"tcp://127.0.0.1:12100"</span></div><div class="line">session<span class="selector-class">.save_handler</span> = redis</div><div class="line">session<span class="selector-class">.save_path</span> = <span class="string">"tcp://127.0.0.1:12100"</span></div></pre></td></tr></table></figure></p>
<p>或者<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">session<span class="selector-class">.save_handler</span> = redis</div><div class="line">session<span class="selector-class">.save_path</span> = <span class="string">"tcp://127.0.0.1:6379"</span></div><div class="line">session<span class="selector-class">.save_handler</span> = redis</div><div class="line">session<span class="selector-class">.save_path</span> = <span class="string">"tcp://127.0.0.1:6379"</span></div></pre></td></tr></table></figure></p>
<p>多个redis/memchache<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">session<span class="selector-class">.save_path</span> = <span class="string">"tcp://127.0.0.1:6379,tcp://s01.nosql.ttlsa.com:6380"</span></div><div class="line">session<span class="selector-class">.save_path</span> = <span class="string">"tcp://127.0.0.1:6379,tcp://s01.nosql.ttlsa.com:6380"</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;默认情况下，PHP将session存放到当前服务器/tmp目录下，一个session一个文件，全部以sess_前缀开始。随着session文件的增加出现性能问题，并且不利于项目的扩展：session不共享，导致session丢失。&lt;/p&gt;
&lt;p&gt;为了解决这个问题，我们可以将
    
    </summary>
    
      <category term="编程" scheme="https://hanxiansen.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="php" scheme="https://hanxiansen.github.io/tags/php/"/>
    
      <category term="session" scheme="https://hanxiansen.github.io/tags/session/"/>
    
      <category term="redis" scheme="https://hanxiansen.github.io/tags/redis/"/>
    
      <category term="memcache" scheme="https://hanxiansen.github.io/tags/memcache/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript中in运算符的用处</title>
    <link href="https://hanxiansen.github.io/2016/09/12/JavaScript%E4%B8%ADin%E8%BF%90%E7%AE%97%E7%AC%A6%E7%9A%84%E7%94%A8%E5%A4%84/"/>
    <id>https://hanxiansen.github.io/2016/09/12/JavaScript中in运算符的用处/</id>
    <published>2016-09-12T12:38:49.000Z</published>
    <updated>2016-09-12T12:55:28.063Z</updated>
    
    <content type="html"><![CDATA[<p>看《JavaScript权威指南》这本书时发现了“in”运算符这一特殊知识点，以前没怎么注意，但是发现有很多用处，这里记录一下：</p>
<p>在msdn中是这样解释其用处的：</p>
<ul>
<li>释义：<strong>如果指定的属性存在于指定的对象中，则 in 运算符会返回 true。</strong></li>
<li>链接：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/in" target="_blank" rel="external">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/in</a></li>
<li>语法：<code>prop in objectName</code></li>
<li>参数<br>prop：一个字符串类型或者symbol类型的属性名，或者数组索引。<br>objectName：需要检测的对象。</li>
</ul>
<h3 id="相关示例"><a href="#相关示例" class="headerlink" title="相关示例"></a>相关示例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 数组</span></div><div class="line"><span class="keyword">var</span> trees = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"redwood"</span>, <span class="string">"bay"</span>, <span class="string">"cedar"</span>, <span class="string">"oak"</span>, <span class="string">"maple"</span>);</div><div class="line"><span class="number">0</span> <span class="keyword">in</span> trees        <span class="comment">// 返回true</span></div><div class="line"><span class="number">3</span> <span class="keyword">in</span> trees        <span class="comment">// 返回true</span></div><div class="line"><span class="number">6</span> <span class="keyword">in</span> trees        <span class="comment">// 返回false</span></div><div class="line"><span class="string">"bay"</span> <span class="keyword">in</span> trees    <span class="comment">// 返回false (必须使用索引号,而不是数组元素的值)</span></div><div class="line"><span class="string">"length"</span> <span class="keyword">in</span> trees <span class="comment">// 返回true (length是一个数组属性)</span></div><div class="line"></div><div class="line"><span class="comment">// 内置对象</span></div><div class="line"><span class="string">"PI"</span> <span class="keyword">in</span> <span class="built_in">Math</span>          <span class="comment">// 返回true</span></div><div class="line"></div><div class="line"><span class="comment">// 自定义对象</span></div><div class="line"><span class="keyword">var</span> mycar = &#123;make: <span class="string">"Honda"</span>, model: <span class="string">"Accord"</span>, year: <span class="number">1998</span>&#125;;</div><div class="line"><span class="string">"make"</span> <span class="keyword">in</span> mycar  <span class="comment">// 返回true</span></div><div class="line"><span class="string">"model"</span> <span class="keyword">in</span> mycar <span class="comment">// 返回true</span></div></pre></td></tr></table></figure>
<h3 id="注意事项01"><a href="#注意事项01" class="headerlink" title="注意事项01"></a>注意事项01</h3><p>in的右边必须是一个对象，如：你可以指定一个用String构造器<strong>显式创建包装对象</strong>生成的字符串，但是不能指定字符串直接量的形式：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="string">'toString'</span> <span class="keyword">in</span> <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'ss'</span>)        <span class="comment">// 返回true</span></div><div class="line"><span class="string">'toString'</span> <span class="keyword">in</span> <span class="string">'ss'</span>      <span class="comment">// 会报错</span></div></pre></td></tr></table></figure></p>
<h3 id="注意事项02"><a href="#注意事项02" class="headerlink" title="注意事项02"></a>注意事项02</h3><p>如果你使用delete操作符删除了对象的一个属性，再次用in检查时，会返回false，如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 自定义对象</span></div><div class="line"><span class="keyword">var</span> mycar = &#123;make: <span class="string">"Honda"</span>, model: <span class="string">"Accord"</span>, year: <span class="number">1998</span>&#125;;</div><div class="line"><span class="keyword">delete</span> mycar.make</div><div class="line"><span class="string">"make"</span> <span class="keyword">in</span> mycar     <span class="comment">//返回 false</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;看《JavaScript权威指南》这本书时发现了“in”运算符这一特殊知识点，以前没怎么注意，但是发现有很多用处，这里记录一下：&lt;/p&gt;
&lt;p&gt;在msdn中是这样解释其用处的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;释义：&lt;strong&gt;如果指定的属性存在于指定的对象中，则 in 运算
    
    </summary>
    
      <category term="blog" scheme="https://hanxiansen.github.io/categories/blog/"/>
    
    
      <category term="JavaScript" scheme="https://hanxiansen.github.io/tags/JavaScript/"/>
    
      <category term="运算符" scheme="https://hanxiansen.github.io/tags/%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    
      <category term="悟学" scheme="https://hanxiansen.github.io/tags/%E6%82%9F%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>fiddler出现无法抓包解决</title>
    <link href="https://hanxiansen.github.io/2016/09/12/fiddler%E5%87%BA%E7%8E%B0%E6%97%A0%E6%B3%95%E6%8A%93%E5%8C%85%E8%A7%A3%E5%86%B3/"/>
    <id>https://hanxiansen.github.io/2016/09/12/fiddler出现无法抓包解决/</id>
    <published>2016-09-12T08:58:35.000Z</published>
    <updated>2016-09-12T09:03:18.824Z</updated>
    
    <content type="html"><![CDATA[<p>打开fiddler后，检测面板没有反应，反复重启了fiddler后还是不能解决。<br>突然想到fiddler是个抓包软件，那他无法抓包是不是因为他的相关行为被什么给限制了？（大水冲了龙王庙！），额我关闭Windows自带的防火墙和腾讯的安全管家后，还是不行，当我看到那款国产广告屏蔽软件（净网大师），马上想到——应该就是它搞的鬼，关闭后，果然能正常抓包了！哈哈！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;打开fiddler后，检测面板没有反应，反复重启了fiddler后还是不能解决。&lt;br&gt;突然想到fiddler是个抓包软件，那他无法抓包是不是因为他的相关行为被什么给限制了？（大水冲了龙王庙！），额我关闭Windows自带的防火墙和腾讯的安全管家后，还是不行，当我看到那款国
    
    </summary>
    
      <category term="blog" scheme="https://hanxiansen.github.io/categories/blog/"/>
    
    
      <category term="fiddler" scheme="https://hanxiansen.github.io/tags/fiddler/"/>
    
      <category term="工具使用" scheme="https://hanxiansen.github.io/tags/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
      <category term="抓包" scheme="https://hanxiansen.github.io/tags/%E6%8A%93%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>关于编码中异或概念的理解</title>
    <link href="https://hanxiansen.github.io/2016/09/11/%E5%85%B3%E4%BA%8E%E7%BC%96%E7%A0%81%E4%B8%AD%E5%BC%82%E6%88%96%E6%A6%82%E5%BF%B5%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <id>https://hanxiansen.github.io/2016/09/11/关于编码中异或概念的理解/</id>
    <published>2016-09-11T03:11:18.000Z</published>
    <updated>2016-09-11T05:07:54.732Z</updated>
    
    <content type="html"><![CDATA[<p>异或，英文为<strong>exclusive OR</strong>，或缩写成<strong>xor</strong></p>
<p>在《编码》这本书中，用各种电路图展示过逻辑中的各种门，比如与门，或门，这其中“异或门”一开始没怎么弄懂，网上搜了下资料，找到这些解释辅助理解：</p>
<h2 id="1、二进制加法中的剩余系"><a href="#1、二进制加法中的剩余系" class="headerlink" title="1、二进制加法中的剩余系"></a>1、二进制加法中的剩余系</h2><p>异或门是用来解决二进制剩余系的，1101+01011，这其中0+1 =1, 1+1=0;0+0=0; 其中最重要的就是1+1等于0，因为1+1要进1位，所以会余下0，理解了二进制中这个后可以很容易知道异或门在两个布尔中扮演的角色和布尔值异或后的结果；</p>
<h2 id="2、不是这个就是那个"><a href="#2、不是这个就是那个" class="headerlink" title="2、不是这个就是那个"></a>2、不是这个就是那个</h2><p>可以理解为：“不是这个就是那个”。即满足两个条件之一，不能两个都选，也不能一个不选。</p>
<p>比如：“我明天要么去北京，要么去上海” 这个命题就可以理解为 “我明天去北京” 异或 “我明天去上海” 。这样，我明天肯定在北京或上海两地之一，不可能在第三个地方，也不可能明天同时出现在北京和上海。<br>这是通俗易懂的理解。</p>
<h2 id="3、等价于！"><a href="#3、等价于！" class="headerlink" title="3、等价于！="></a>3、等价于！=</h2><p>XOR 等价于 <strong><em>！= </em></strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">False</span> <span class="keyword">XOR</span> <span class="keyword">False</span> -&gt; <span class="keyword">False</span>;</div><div class="line"><span class="keyword">False</span> <span class="keyword">XOR</span> <span class="keyword">True</span> -&gt; <span class="keyword">True</span>;</div><div class="line"><span class="keyword">True</span> <span class="keyword">XOR</span> <span class="keyword">False</span> -&gt; <span class="keyword">True</span>;</div><div class="line"><span class="keyword">True</span> <span class="keyword">XOR</span> <span class="keyword">True</span> -&gt; <span class="keyword">False</span>;</div></pre></td></tr></table></figure></p>
<p>把 XOR 替换为 ！=<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">False</span> ！= <span class="keyword">False</span> -&gt; <span class="keyword">False</span>;</div><div class="line"><span class="keyword">False</span> ！= <span class="keyword">True</span> -&gt; <span class="keyword">True</span>;</div><div class="line"><span class="keyword">True</span> ！= <span class="keyword">False</span> -&gt; <span class="keyword">True</span>;</div><div class="line"><span class="keyword">True</span> ！= <span class="keyword">True</span> -&gt; <span class="keyword">False</span>;</div></pre></td></tr></table></figure></p>
<p>依然成立</p>
<p>说白了XOR等于在问：“两个布尔值是否不同？”</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;异或，英文为&lt;strong&gt;exclusive OR&lt;/strong&gt;，或缩写成&lt;strong&gt;xor&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在《编码》这本书中，用各种电路图展示过逻辑中的各种门，比如与门，或门，这其中“异或门”一开始没怎么弄懂，网上搜了下资料，找到这些解释辅助理
    
    </summary>
    
      <category term="blog" scheme="https://hanxiansen.github.io/categories/blog/"/>
    
    
      <category term="悟学" scheme="https://hanxiansen.github.io/tags/%E6%82%9F%E5%AD%A6/"/>
    
      <category term="算法" scheme="https://hanxiansen.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="编码" scheme="https://hanxiansen.github.io/tags/%E7%BC%96%E7%A0%81/"/>
    
      <category term="逻辑" scheme="https://hanxiansen.github.io/tags/%E9%80%BB%E8%BE%91/"/>
    
      <category term="逻辑门" scheme="https://hanxiansen.github.io/tags/%E9%80%BB%E8%BE%91%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>快速排序算法学习</title>
    <link href="https://hanxiansen.github.io/2016/09/03/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/"/>
    <id>https://hanxiansen.github.io/2016/09/03/快速排序算法学习/</id>
    <published>2016-09-03T02:37:39.000Z</published>
    <updated>2016-09-03T08:40:23.237Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="blog" scheme="https://hanxiansen.github.io/categories/blog/"/>
    
    
      <category term="悟学" scheme="https://hanxiansen.github.io/tags/%E6%82%9F%E5%AD%A6/"/>
    
      <category term="算法" scheme="https://hanxiansen.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="快速排序" scheme="https://hanxiansen.github.io/tags/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>冒泡排序算法学习</title>
    <link href="https://hanxiansen.github.io/2016/09/01/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/"/>
    <id>https://hanxiansen.github.io/2016/09/01/冒泡排序算法学习/</id>
    <published>2016-09-01T13:07:20.000Z</published>
    <updated>2016-09-11T04:35:00.901Z</updated>
    
    <content type="html"><![CDATA[<p>谈到冒泡排序，先理解冒泡是一种什么感觉：</p>
<p><img src="http://btznt.img48.wal8.com/img48/351201_20130616232947/147273590885.gif" alt=""></p>
<p>如图所示，冒泡的专业释义是指：<strong>水里的土壤存在气体，而后冒出，在水里产生无水空间直至与大气接触消融。其过程称为冒泡</strong><br>我们可以看到冒泡是因为水中的空气和水区分，比水轻所以冒了出来，通俗点来说，冒泡就是因为在一群相同的物件中，因为某个东西比较特殊所以鹤立鸡群，率先冒出头角，爬到了社会顶层。</p>
<p>冒泡排序的核心思想就是把一组数据中最小或最大的那个数据冒出来，给这个特殊数据充满气，让它像一个小气泡一样漂浮到水面上。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$a = <span class="keyword">array</span>(<span class="number">100</span>,<span class="number">50</span>,<span class="number">20</span>,<span class="number">33</span>,<span class="number">69</span>,<span class="number">99</span>,<span class="number">10</span>,<span class="number">12</span>,<span class="number">22</span>,<span class="number">11</span>);</div><div class="line"><span class="comment">// 冒泡的次数</span></div><div class="line"><span class="keyword">for</span> ($j=<span class="number">1</span>; $j&lt;count($a); $j++) &#123;</div><div class="line">    <span class="comment">// 每冒泡$j次，就减少$j个泡泡,因为这些泡泡已经冒到水面上了</span></div><div class="line">    <span class="keyword">for</span>($k=<span class="number">0</span>; $k&lt;count($a)-$j; $k++) &#123;</div><div class="line">        <span class="comment">// 指引冒泡的方向</span></div><div class="line">        <span class="keyword">if</span> ($a[$k] &lt; $a[$k+<span class="number">1</span>]) &#123;</div><div class="line">            <span class="comment">// 负责前后数据交换（推动冒泡前行）</span></div><div class="line">            $tmp = $a[$k];</div><div class="line">            $a[$k] = $a[$k+<span class="number">1</span>];</div><div class="line">            $a[$k+<span class="number">1</span>] = $tmp;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>推动冒泡排序成立需要三个因素：</p>
<ol>
<li>冒泡的方向</li>
<li>冒泡的次数</li>
<li>冒泡的空气推力</li>
</ol>
<p>如果想理解php代码中关于冒泡排序的具体过程，可以把复杂程序拆分简单化，复杂的问题往往是由各种简单小问题累计起来的，只要适当的拆分，逐一击破，就能大胜也！</p>
<ol>
<li>首先我们找一组数据中要冒的那个气泡（也就是找到该组数据中的最大或最小值）<br>我们看这段数组<code>$a = array(10,50,20,33,69,99,100,12,2,11)</code>，如果让你用站在常规思路去比较大小，我们可以一眼扫描完，在大脑中快速运算对比完后把<strong>2</strong>给揪出来，但是遇到数据少的情况下还好，如果数据多起来，有几万个数据的时候就不好办了，因为你的大脑可能一下子记不住那么多数据，数据一多可能会把你搞糊涂，不记得哪些对比过，哪些还没对比过，这时候你想了个个比较笨的万无一失的方法，你把第一个数给揪出来，先假设它就是整个数据中最小的值10（只是假设），为了尽量少的看后面那一大串的数据，你只和紧挨着它的后一位置的数据进行对比（通过对比，你发现10比50小，运气不错），然后你再把10和接下来的那个值20对比，和33对比….</li>
</ol>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$a = <span class="keyword">array</span>(<span class="number">10</span>,<span class="number">50</span>,<span class="number">20</span>,<span class="number">33</span>,<span class="number">69</span>,<span class="number">99</span>,<span class="number">100</span>,<span class="number">12</span>,<span class="number">2</span>,<span class="number">11</span>);</div><div class="line"></div><div class="line"><span class="comment">// 这里我们找数组中最小的那个气泡</span></div><div class="line"><span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; count($a); $i++) &#123;</div><div class="line">	<span class="comment">// 假设数组中最小的那个值就在第一个（索引值为0），我们往从0索引开始逐个向后比较大小</span></div><div class="line">	$low = $a[<span class="number">0</span>];</div><div class="line">	<span class="keyword">if</span>($low &gt; $a[$i]) &#123;</div><div class="line">		$low = $a[$i];		</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这种比较最小值的方法（算是最通用的找最小值的方法），但是如果考虑一些特殊情况，如果你再比较这么多数据的时候，突然分神了，你忘记比较到哪个数据了（擦，刚才比较的是140，还是141来着），这时候你不得不崩溃的从头开始比较（当然在计算机中，一般不会发生这种不靠谱的事情，但也有可能发生意外），于是你想了一个更笨的办法，你和它后面的那个数据比较，如果比它小，就交换下，比它大就不交换，当然这么笨的举动如果让计算机去做，可能也就没什么了吧。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>($k=<span class="number">0</span>; $k&lt;count($a); $k++) &#123;</div><div class="line">    <span class="comment">// 指引冒泡的方向</span></div><div class="line">    <span class="keyword">if</span> ($a[$k] &lt; $a[$k+<span class="number">1</span>]) &#123;</div><div class="line">        <span class="comment">// 负责前后数据交换（推动冒泡前行）</span></div><div class="line">        $tmp = $a[$k];</div><div class="line">        $a[$k] = $a[$k+<span class="number">1</span>];</div><div class="line">        $a[$k+<span class="number">1</span>] = $tmp;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>冒泡排序的具体演示：</p>
<p><img src="http://btznt.img48.wal8.com/img48/351201_20130616232947/147273713677.gif" alt=""></p>
<p>可以看到那些个特殊的数据就像个可爱的小气泡自觉的冒到了它该去的顶层位置。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;谈到冒泡排序，先理解冒泡是一种什么感觉：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://btznt.img48.wal8.com/img48/351201_20130616232947/147273590885.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;如图所示，冒泡的专业
    
    </summary>
    
      <category term="blog" scheme="https://hanxiansen.github.io/categories/blog/"/>
    
    
      <category term="悟学" scheme="https://hanxiansen.github.io/tags/%E6%82%9F%E5%AD%A6/"/>
    
      <category term="算法" scheme="https://hanxiansen.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="冒泡排序" scheme="https://hanxiansen.github.io/tags/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>谈谈我对php匿名函数与闭包概念的理解</title>
    <link href="https://hanxiansen.github.io/2016/08/18/%E8%B0%88%E8%B0%88%E6%88%91%E5%AF%B9php%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0%E4%B8%8E%E9%97%AD%E5%8C%85%E6%A6%82%E5%BF%B5%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <id>https://hanxiansen.github.io/2016/08/18/谈谈我对php匿名函数与闭包概念的理解/</id>
    <published>2016-08-18T08:11:26.000Z</published>
    <updated>2016-08-18T08:22:36.114Z</updated>
    
    <content type="html"><![CDATA[<h2 id="先说说闭包"><a href="#先说说闭包" class="headerlink" title="先说说闭包"></a>先说说闭包</h2><p>在javascript中，闭包是非常常用的概念，关于闭包比较好的解释是这样的<strong>“一个用来保持所处环境函数”</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;先说说闭包&quot;&gt;&lt;a href=&quot;#先说说闭包&quot; class=&quot;headerlink&quot; title=&quot;先说说闭包&quot;&gt;&lt;/a&gt;先说说闭包&lt;/h2&gt;&lt;p&gt;在javascript中，闭包是非常常用的概念，关于闭包比较好的解释是这样的&lt;strong&gt;“一个用来保持所处环境函
    
    </summary>
    
      <category term="blog" scheme="https://hanxiansen.github.io/categories/blog/"/>
    
    
      <category term="悟学" scheme="https://hanxiansen.github.io/tags/%E6%82%9F%E5%AD%A6/"/>
    
      <category term="php" scheme="https://hanxiansen.github.io/tags/php/"/>
    
      <category term="匿名函数" scheme="https://hanxiansen.github.io/tags/%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0/"/>
    
      <category term="闭包" scheme="https://hanxiansen.github.io/tags/%E9%97%AD%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>php匿名函数use关键字学习</title>
    <link href="https://hanxiansen.github.io/2016/08/18/php%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0use%E5%85%B3%E9%94%AE%E5%AD%97%E5%AD%A6%E4%B9%A0/"/>
    <id>https://hanxiansen.github.io/2016/08/18/php匿名函数use关键字学习/</id>
    <published>2016-08-18T07:38:28.000Z</published>
    <updated>2016-08-18T08:11:39.533Z</updated>
    
    <content type="html"><![CDATA[<p>先上一个php官方文档关于这一知识点的链接：<a href="http://www.php.net/manual/zh/functions.anonymous.php" target="_blank" rel="external">http://www.php.net/manual/zh/functions.anonymous.php</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;先上一个php官方文档关于这一知识点的链接：&lt;a href=&quot;http://www.php.net/manual/zh/functions.anonymous.php&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.php.net/ma
    
    </summary>
    
      <category term="blog" scheme="https://hanxiansen.github.io/categories/blog/"/>
    
    
      <category term="php" scheme="https://hanxiansen.github.io/tags/php/"/>
    
      <category term="匿名函数" scheme="https://hanxiansen.github.io/tags/%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0/"/>
    
      <category term="use" scheme="https://hanxiansen.github.io/tags/use/"/>
    
      <category term="laravel" scheme="https://hanxiansen.github.io/tags/laravel/"/>
    
  </entry>
  
  <entry>
    <title>关于laravel中双冒号class写法的学习</title>
    <link href="https://hanxiansen.github.io/2016/07/28/%E5%85%B3%E4%BA%8Elaravel%E4%B8%AD%E5%8F%8C%E5%86%92%E5%8F%B7class%E5%86%99%E6%B3%95%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
    <id>https://hanxiansen.github.io/2016/07/28/关于laravel中双冒号class写法的学习/</id>
    <published>2016-07-28T09:44:58.000Z</published>
    <updated>2016-07-28T09:58:09.445Z</updated>
    
    <content type="html"><![CDATA[<p>在学习laravel模型工厂部分知识的时候遇到这种写法<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">App\User::class</div></pre></td></tr></table></figure></p>
<p>觉得很奇怪的，起初还以为是laravel定义的一个方法，但是一看这名字，马上又否定了自己的愚蠢想法，这class是php的保留字，不可能是laravel自定义的类属性，上网搜了一下，找到了答案<a href="https://laracasts.com/discuss/channels/laravel/laravel-51-what-is-class?page=1" target="_blank" rel="external">https://laracasts.com/discuss/channels/laravel/laravel-51-what-is-class?page=1</a></p>
<p>原来这个<code>::class</code>是专门用来获取包含<strong>命名空间+类名</strong>的，如果是光获取类名，可以用<code>__CLASS__</code>魔术常量，如果要获取当前的命名空间，可以用<code>__NAMESPACE__</code>，但在这里通过一个<code>::class</code>就可以优雅的获取了。如下所示<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">namespace</span> <span class="title">test</span>\<span class="title">test01</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="keyword">self</span>::class;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">new</span> Test();</div></pre></td></tr></table></figure></p>
<p>这里的结果就是<code>test\test01\Test</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在学习laravel模型工厂部分知识的时候遇到这种写法&lt;br&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td c
    
    </summary>
    
      <category term="blog" scheme="https://hanxiansen.github.io/categories/blog/"/>
    
    
      <category term="php" scheme="https://hanxiansen.github.io/tags/php/"/>
    
      <category term="laravel" scheme="https://hanxiansen.github.io/tags/laravel/"/>
    
      <category term="class" scheme="https://hanxiansen.github.io/tags/class/"/>
    
  </entry>
  
  <entry>
    <title>关于laravel中的表单方法欺骗</title>
    <link href="https://hanxiansen.github.io/2016/07/26/%E5%85%B3%E4%BA%8Elaravel%E4%B8%AD%E7%9A%84%E8%A1%A8%E5%8D%95%E6%96%B9%E6%B3%95%E6%AC%BA%E9%AA%97/"/>
    <id>https://hanxiansen.github.io/2016/07/26/关于laravel中的表单方法欺骗/</id>
    <published>2016-07-26T02:24:24.000Z</published>
    <updated>2016-07-26T03:55:00.147Z</updated>
    
    <content type="html"><![CDATA[<p>经常在laravel的blade模板中看到如下这样写法的代码，咋看不明所以，上网搜了一下，找到了答案。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"_method"</span> <span class="attr">value</span>=<span class="string">"PUT"</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>原来这是laravel中的表单欺骗（<strong>Form Method Spoofing</strong>），在laravel的文档中<a href="http://www.golaravel.com/laravel/docs/5.1/routing/#form-method-spoofing" target="_blank" rel="external">http://www.golaravel.com/laravel/docs/5.1/routing/#form-method-spoofing</a>是这样解释的：</p>
<p>HTML 表单没有支持 <code>PUT</code>、<code>PATCH</code> 或 <code>DELETE</code> 动作。所以在从 HTML 表单中调用被定义的 <code>PUT</code>、<code>PATCH</code> 或 <code>DELETE</code> 路由时，你将需要在表单中增加隐藏的 <code>_method</code> 字段。跟随 <code>_method</code> 字段送出的值将被作为 HTTP 的请求方法使用：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/foo/bar"</span> <span class="attr">method</span>=<span class="string">"POST"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"_method"</span> <span class="attr">value</span>=<span class="string">"PUT"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"_token"</span> <span class="attr">value</span>=<span class="string">"&#123;&#123; csrf_token() &#125;&#125;"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<p>至于为什么要这样做，是因为laravel路由要遵循<strong>RESTful架构</strong>（<a href="http://kb.cnblogs.com/page/512047/" target="_blank" rel="external">RESTful架构架构详解</a>）<br>(路由—&gt;控制器)Restful对照关系示例表：<br><img src="http://btznt.img48.wal8.com/img48/351201_20130616232947/14695027633.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;经常在laravel的blade模板中看到如下这样写法的代码，咋看不明所以，上网搜了一下，找到了答案。&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line
    
    </summary>
    
      <category term="blog" scheme="https://hanxiansen.github.io/categories/blog/"/>
    
    
      <category term="php" scheme="https://hanxiansen.github.io/tags/php/"/>
    
      <category term="laravel" scheme="https://hanxiansen.github.io/tags/laravel/"/>
    
      <category term="路由" scheme="https://hanxiansen.github.io/tags/%E8%B7%AF%E7%94%B1/"/>
    
  </entry>
  
  <entry>
    <title>关于在laravel中进行数据migrate操作时报错的解决方案</title>
    <link href="https://hanxiansen.github.io/2016/07/25/%E5%85%B3%E4%BA%8E%E5%9C%A8laravel%E4%B8%AD%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AEmigrate%E6%93%8D%E4%BD%9C%E6%97%B6%E6%8A%A5%E9%94%99%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>https://hanxiansen.github.io/2016/07/25/关于在laravel中进行数据migrate操作时报错的解决方案/</id>
    <published>2016-07-25T07:40:32.000Z</published>
    <updated>2016-07-25T08:16:35.854Z</updated>
    
    <content type="html"><![CDATA[<p>今天在学习laravel时，在进行<code>php artisan migrate</code>操作时报了一个错误<code>[PDOException]
SQLSTATE[42000]: Syntax error or access violation: 1067 Invalid default val
ue for &#39;created_at&#39;</code></p>
<p><img src="http://btznt.img48.wal8.com/img48/351201_20130616232947/146943049456.png" alt=""></p>
<p>百思不得其解，上网搜索，在github上找到了解决方案</p>
<p>解决方案就是找到config/database.php 文件，把<code>mysql</code>的配置项<code>strict</code>修改为<code>true</code>就可以了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天在学习laravel时，在进行&lt;code&gt;php artisan migrate&lt;/code&gt;操作时报了一个错误&lt;code&gt;[PDOException]
SQLSTATE[42000]: Syntax error or access violation: 1067 In
    
    </summary>
    
      <category term="blog" scheme="https://hanxiansen.github.io/categories/blog/"/>
    
    
      <category term="php" scheme="https://hanxiansen.github.io/tags/php/"/>
    
      <category term="laravel" scheme="https://hanxiansen.github.io/tags/laravel/"/>
    
      <category term="bug" scheme="https://hanxiansen.github.io/tags/bug/"/>
    
  </entry>
  
  <entry>
    <title>博客搭建历程</title>
    <link href="https://hanxiansen.github.io/2016/07/21/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%8E%86%E7%A8%8B/"/>
    <id>https://hanxiansen.github.io/2016/07/21/博客搭建历程/</id>
    <published>2016-07-21T05:08:56.000Z</published>
    <updated>2016-07-21T07:54:18.723Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、一点碎碎念"><a href="#一、一点碎碎念" class="headerlink" title="一、一点碎碎念"></a>一、一点碎碎念</h2><p>以前在QQ空间的时代，我会偶尔写写日志什么的，但后来用说说、微博、朋友圈产品多了后，就很少写大篇幅的文字了，主要是变懒了，懒得敲那么多文字，这是我搭建这个博客自己写的第一篇文章，感觉有点像自言自语的碎碎念哈，嘿嘿。学编程这么久了，一直想自己开一个博客，最开始是在sina博客上面搞的，那是大二那会儿，当时迷恋做ps和ae后期这些（主要是因为要给社团做宣传视频，相信经历过这些的童鞋应该会有些感触吧），当时因为做这些玩意，所以就在sina上面搭建了一个博客，转载一些有用的教程，记得比较清楚的一个博客是一个叫“醉清风”的博客，当时转载了他好多文章，还在上面下载了他好多视频教程，那算是我最开始认识的博客了，后来捣鼓着自己买了个虚拟主机，开始用discuz做论坛，disucz学起来真心还是蛮简单的（搭建、安装入门很简单，但是二次开发就非当时之我所能搞定的了），当时做了一个叫<a href="http://www.soucangjie.com" title="搜藏界论坛" target="_blank" rel="external">搜藏界</a>的论坛，在上面传播一些电影、电视剧、纪录片资源，然后在sina上面又搞了一个搜藏界的博客，做seo的导向，陆陆续续在网易和百度上面都做过一些博客，但后来没能坚持下来，香港的虚拟主机很坑是一方面，自己因为各种学校的事情忙碌也是一个原因。自己经常在网上搜索资料，很多报错和相关学习资料都可以在大量的博客中找到，这其中csdn和博客园占了大部分，所以后来就在csdn上开了一个博客<a href="http://blog.csdn.net/a386611016" title="掘玉匠" target="_blank" rel="external">掘玉匠</a>，不过实在懒得写文字，就写了几篇项目中遇到的一些小问题及解决思路，前段时间去一家公司面试，遇到一个同学校的学长，一番交流，颇有收获，末了，问我有没有个人博客，我说没有，只有在有道云笔记上面做一些比较，他劝我还是要有个个人博客，平常发表一些文字，写文章不光是记录技术成长道路，还有敦促自己写好文章的推动力（因为有看官），当时颇有感触，回到家就开始捣鼓自己的个人博客，其实早些时候（2015）的时候，我就用ThinkPHP写过一个博客的小项目，但是那个啥，写得太烂了，所以不好意思放到线上去。所以现在要写个博客只好自己找找了，早前的时候，我就看到有很多技术文章介绍过hexo，而且看到很多以github.io作为一级域名的博客，当时就知道有很多程序猿在用，但当时只是简单的收藏关注了一写，以为要懂node.js技术才行，所以没有细究，直到前几日看了几篇技术文章，才发现原来真的很简单。所以捣鼓了一天，搞定上线（给自己一点掌声，嘿嘿嘿）。</p>
<h2 id="二、初期准备"><a href="#二、初期准备" class="headerlink" title="二、初期准备"></a>二、初期准备</h2><ol>
<li>node.js安装及环境变量配置</li>
<li>git安装及环境变量配置</li>
</ol>
<h2 id="三、正式安装"><a href="#三、正式安装" class="headerlink" title="三、正式安装"></a>三、正式安装</h2><p>我这里参考的是一篇写好的hexo安装教程：<a href="http://opiece.me/2015/04/09/hexo-guide/" target="_blank" rel="external">http://opiece.me/2015/04/09/hexo-guide/</a>，具体的安装过程，我就不赘述了，这里我只是说一下，我在安装过程中遇到的问题及错误：</p>
<h3 id="1、报RROR-Deployer-not-found-github错误"><a href="#1、报RROR-Deployer-not-found-github错误" class="headerlink" title="1、报RROR Deployer not found : github错误"></a>1、报RROR Deployer not found : github错误</h3><p>出现这种错误有几种原因：</p>
<h5 id="在hexo3-0版本中要用git代替github，查看版本是用hexo-version命令"><a href="#在hexo3-0版本中要用git代替github，查看版本是用hexo-version命令" class="headerlink" title="在hexo3.0版本中要用git代替github，查看版本是用hexo -version命令"></a>在hexo3.0版本中要用git代替github，查看版本是用hexo -version命令</h5><h5 id="运行以下命令："><a href="#运行以下命令：" class="headerlink" title="运行以下命令："></a>运行以下命令：</h5><ol>
<li><code>$ npm install hexo-deployer-git --save</code></li>
<li><code>$ hexo g</code></li>
<li><code>hexo d</code></li>
</ol>
<h3 id="2、报fatal-could-not-read-Username-for-‘https-github-com‘-Invalid-argument错误"><a href="#2、报fatal-could-not-read-Username-for-‘https-github-com‘-Invalid-argument错误" class="headerlink" title="2、报fatal: could not read Username for ‘https://github.com‘: Invalid argument错误"></a>2、报fatal: could not read Username for ‘<a href="https://github.com" target="_blank" rel="external">https://github.com</a>‘: Invalid argument错误</h3><p>一般出现这个错误就是因为git没有真正的配置好，具体的git配置可以上网搜索，检查配置正确的重要方法就是把add、commit、push整个流程都走一遍，直到在github上能看到提交的代码，就说明git配置好了</p>
<h3 id="3、hexo-fatal-Not-a-git-repository-or-any-of-the-parent-directories"><a href="#3、hexo-fatal-Not-a-git-repository-or-any-of-the-parent-directories" class="headerlink" title="3、hexo fatal: Not a git repository (or any of the parent directories)"></a>3、hexo fatal: Not a git repository (or any of the parent directories)</h3><p>出现这个错误就是无法正常的提交库，可以检查提交的库地址是否有错，如果没错可以再安装一下支持git类型的插件<br><code>npm install hexo-deployer-git --save</code><br>然后<br><code>hexo g</code><br><code>hexo d</code>试一下，如果还是不行，我建议可以删除目录后按照教程再走一遍</p>
<h3 id="4、当在windows上面的cmd上面提交出现错误时"><a href="#4、当在windows上面的cmd上面提交出现错误时" class="headerlink" title="4、当在windows上面的cmd上面提交出现错误时"></a>4、当在windows上面的cmd上面提交出现错误时</h3><p>我当时给deploy选项设置时是用的<strong>https</strong>形式的仓库，所以在提交代码上理所当然的会要求输入用户名和密码才能提交，但是大家都知道的，cmd面板上面是无法调出输入用户名和密码的小框框的，所以换到git cmd上面就可以了，后来我把仓库地址换成git开头和结尾的就没有问题了</p>
<h2 id="四、一点总结"><a href="#四、一点总结" class="headerlink" title="四、一点总结"></a>四、一点总结</h2><h3 id="1、其实hexo博客的就是一个git仓库的正常管理"><a href="#1、其实hexo博客的就是一个git仓库的正常管理" class="headerlink" title="1、其实hexo博客的就是一个git仓库的正常管理"></a>1、其实hexo博客的就是一个git仓库的正常管理</h3><p>我对hexo真正的运行原理不是很懂，但就我使用的感觉来说，hexo就是一个托管在github上面的仓库，文章以markdown的形式存储在github仓库中，所以hexo 的deploy就是一个git push的过程，但是因为hexo的特殊处理，能够将内容区分后进行push</p>
<h3 id="2、出了问题不用怕，上goole，究细节，看错误提示"><a href="#2、出了问题不用怕，上goole，究细节，看错误提示" class="headerlink" title="2、出了问题不用怕，上goole，究细节，看错误提示"></a>2、出了问题不用怕，上goole，究细节，看错误提示</h3><p>在安装的过程中遇到很多的问题，一个个的上网搜答案，很多问题都出在一些不经意之间的细节中，要学会像侦探一样，探寻每个不同寻常的背后隐藏的故事</p>
<p>ok，先写到这儿吧，以后有什么，再跟进。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、一点碎碎念&quot;&gt;&lt;a href=&quot;#一、一点碎碎念&quot; class=&quot;headerlink&quot; title=&quot;一、一点碎碎念&quot;&gt;&lt;/a&gt;一、一点碎碎念&lt;/h2&gt;&lt;p&gt;以前在QQ空间的时代，我会偶尔写写日志什么的，但后来用说说、微博、朋友圈产品多了后，就很少写大篇幅的
    
    </summary>
    
      <category term="blog" scheme="https://hanxiansen.github.io/categories/blog/"/>
    
    
      <category term="博客" scheme="https://hanxiansen.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="hexo" scheme="https://hanxiansen.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://hanxiansen.github.io/2016/07/20/hello-world/"/>
    <id>https://hanxiansen.github.io/2016/07/20/hello-world/</id>
    <published>2016-07-20T07:34:54.284Z</published>
    <updated>2016-07-20T07:34:54.288Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
